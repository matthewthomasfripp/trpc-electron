// Generated by dts-bundle-generator v8.1.2

import { AnyTRPCRouter, inferRouterContext } from '@trpc/server';
import { BrowserWindow, IpcMainInvokeEvent } from 'electron';

export declare const ELECTRON_TRPC_CHANNEL = "trpc-electron";
export interface CreateContextOptions {
	event: IpcMainInvokeEvent;
}
export type MaybePromise<TType> = Promise<TType> | TType;
declare class IPCHandler<TRouter extends AnyTRPCRouter> {
	#private;
	constructor({ createContext, router, windows, }: {
		createContext?: (opts: CreateContextOptions) => MaybePromise<inferRouterContext<TRouter>>;
		router: TRouter;
		windows?: BrowserWindow[];
	});
	attachWindow(win: BrowserWindow): void;
	detachWindow(win: BrowserWindow): void;
}
export declare const createIPCHandler: <TRouter extends AnyTRPCRouter>({ createContext, router, windows, }: {
	createContext?: (opts: CreateContextOptions) => Promise<inferRouterContext<TRouter>>;
	router: TRouter;
	windows?: Electron.BrowserWindow[];
}) => IPCHandler<TRouter>;
export declare const exposeElectronTRPC: () => void;

export {};
